require 'cspec'

class ArgumentSpecA
  def a(a, b)
    [a, b]
  end
  
  def b(a, b = 2)
    [a, b]
  end
  
  def c(a, *b)
    [a, b]
  end
  
  def d(*a, b)
    [a, b]
  end
  
  def e(a, &b)
    [a, b]
  end
  
  def f(a, *b, c, &d)
    [a, b, c, d]
  end
  
  def g(*a, b = 1)
    [a, b]
  end
  
  def h(@a, b)
    [@a, b]
  end
  
  def val=(x)
    @val = x
  end
  
  def i(self.val, b)
    [@val, b]
  end
end

class ArgumentSpecB
  def a(*args, &block)
    [args, block]
  end
end

describe "Argument patterns" do
  before do
    @test = ArgumentSpecA.new
    @block = lambda { }
  end

  it "should support mandatory normal items" do
    @test.a(1, 2).should == [1, 2]
  end
  
  it "should support optional items" do
    @test.b(1).should == [1, 2]
    @test.b(1, 3).should == [1, 3]
  end
  
  it "should support splats (in any position)" do
    @test.c(1, 2, 3).should == [1, [2, 3]]
    @test.d(1, 2, 3).should == [[1, 2], 3]
  end
  
  it "should support block passes (which are always optional)" do
    @test.e(1, &@block).should == [1, @block]
    @test.e(1).should == [1, nil]
  end
  
  it "should support splats with block passes" do
    @test.f(1, 2, 3, 4, &@block).should == [1, [2, 3], 4, @block]
  end
  
  it "should support assigning to instance variables" do
    @test.h(1, 2).should == [1, 2]
  end
  
  it "should support assigning to methods" do
    @test.i(1, 2).should == [1, 2]
  end
end

describe "Argument lists" do
  before do
    @test = ArgumentSpecB.new
    @block = lambda { }
  end
  
  it "should support normal args" do
    @test.a(1, 2, 3).should == [[1, 2, 3], nil]
  end
  
  it "should support any number of splats" do
    @test.a(1, *[2, 3], 4, *[5, 6, 7]).should == [[1, 2, 3, 4, 5, 6, 7], nil]
  end
  
  it "should support block passes" do
    @test.a(&@block).should == [[], @block]
  end
  
  it "should support literal blocks" do
    result = @test.a { 25 }
    result[1].call.should == 25
  end
end
