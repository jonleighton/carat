require 'cspec'

describe "Object" do
  it "should have a superclass of nil" do
    Object.superclass.should == nil
  end
  
  it "should have a class of Class" do
    Object.class.should == Class
  end
end

describe "An instance of Object" do
  before do
    @object = Object.new
  end
  
  it "should be equal to itself" do
    @object.should == @object
  end
  
  it "should not be equal to another object" do
    @object.should_not == Object.new
  end
  
  it "should have a numeric object id" do
    @object.object_id.class.should == Fixnum
  end
  
  it "should have a class of Object" do
    @object.class.should == Object
  end
  
  it "should return '<Object:[object id]>' for inspect" do
    @object.inspect.should == "<Object:" + @object.object_id.to_s + ">"
  end
  
  it "should return the same as inspect for to_s" do
    @object.to_s.should == @object.inspect
  end
  
  it "should return true for is_a?(Object)" do
    @object.is_a?(Object).should == true
  end
  
  it "should return false for is_a?(Class)" do
    @object.is_a?(Class).should == false
  end
  
  it "should have false as its negation" do
    (!@object).should == false
  end
end

class ObjectSpecA
end

class ObjectSpecB < ObjectSpecA
end

describe "An instance of a subclass" do
  before do
    @object = ObjectSpecB.new
  end
  
  it "should return true for is_a?(<class>)" do
    @object.is_a?(ObjectSpecB).should == true
  end
  
  it "should return true for is_a?(<superclass>)" do
    @object.is_a?(ObjectSpecA).should == true
  end
  
  it "should return true for is_a?(Object)" do
    @object.is_a?(Object).should == true
  end
end

class ObjectSpecC
  def a
    @flip = "flop"
  end
  
  def b
    @flip
  end
end

describe "An instance of a class" do
  before do
    @object = ObjectSpecC.new
  end
  
  it "should return nil as the value of an uninitialised instance variable" do
    @object.b.should == nil
  end
  
  it "should allow an instance variable to be set and then retrieved" do
    @object.a
    @object.b.should == "flop"
  end
end
