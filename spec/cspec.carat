module CSpec
  def self.sets
    @sets ||= []
  end
  
  def self.describe(name, &block)
    @current_set = CSpecSet.new(name)
    self.sets << @current_set
    block.call
  end
  
  def self.it(expectation, &block)
    @current_set << CSpecItem.new(expectation, &block)
  end
  
  def self.before(&block)
    @current_set.before_block = block
  end
  
  def self.run
    sets.each do |set|
      set.run
      puts
    end
  end
end

class CSpecSet
  def initialize(name)
    @name = name
    @items = []
  end
  
  def before_block=(block)
    @before_block = block
  end
  
  def <<(item)
    @items << item
  end
  
  def run
    puts @name
    @items.each do |item|
      if @before_block
        @before_block.call
      end
      
      item.run
    end
  end
end

class CSpecItem
  def initialize(expectation, &contents)
    @expectation = expectation
    @contents    = contents
  end
  
  def run
    puts " - " + @expectation
    
    begin
      @contents.call
    rescue ExpectationFailure => e
      puts
      puts "FAILED: " + e.to_s
      puts e.backtrace.join("\n")
      puts
    end
  end
end

module Kernel
  def describe(name, &block)
    CSpec.describe(name, &block)
  end
  
  def it(expectation, &block)
    CSpec.it(expectation, &block)
  end
  
  def before(&block)
    CSpec.before(&block)
  end
end

class ExpectationFailure < RuntimeError
end

class Should
  def initialize(expected)
    @expected = expected
  end

  def ==(actual)
    if @expected != actual
      raise ExpectationFailure, actual.to_s + " did not match " + @expected.to_s
    end
  end
end

class ShouldNot
  def initialize(rejected)
    @rejected = rejected
  end
  
  def ==(actual)
    if @rejected == actual
      raise ExpectationFailure, actual.to_s + " not expected"
    end
  end
end

class Object
  def should
    Should.new(self)
  end
  
  def should_not
    ShouldNot.new(self)
  end
end
