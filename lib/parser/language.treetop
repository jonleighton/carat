module Carat
  grammar Language
    # A program is the top-level node, containing just a list of expressions
    rule program
      multiline_space? expression_list <Program>
    end
    
    # 1 or more expressions separated by terminators
    rule expression_list
      first:expression rest:(space? terminator expression)* space? terminator? <ExpressionList> /
      '' <EmptyExpressionList>
    end
    
    # An expression is the basic 'thing'
    rule expression
      assignment_expression
    end
    
    rule assignment_expression
      simple_assignment /
      binary_method_assignment /
      binary_operation_assignment /
      or_expression
    end
    
    rule simple_assignment
      receiver:variable space?
      '=' multiline_space?
      value:assignment_expression <Assignment>
    end
    
    rule binary_method_assignment
      receiver:variable space?
      name:('<<' / '>>' / '+' / '-' / '*' / '/') '=' multiline_space?
      value:assignment_expression <BinaryMethodAssignment>
    end
    
    rule binary_operation_assignment
      receiver:variable space?
      name:('||' / '&&') '=' multiline_space?
      value:assignment_expression <BinaryOperationAssignment>
    end
    
    rule or_expression
      left:and_expression space?
      name:'||' multiline_space?
      right:or_expression <BinaryOperation>
      /
      and_expression
    end
    
    rule and_expression
      left:comparison_expression space?
      name:'&&' multiline_space?
      right:and_expression <BinaryOperation>
      /
      comparison_expression
    end
    
    rule comparison_expression
      left:inequality_expression space?
      name:('==' / '!=' / '===' / '<=>') multiline_space?
      right:comparison_expression <BinaryMethodCall>
      /
      inequality_expression
    end
    
    rule inequality_expression
      left:shift_expression space?
      name:('<=' / '>=' / '<' / '>') multiline_space?
      right:inequality_expression <BinaryMethodCall>
      /
      shift_expression
    end
    
    rule shift_expression
      left:add_subtract_expression space?
      name:('<<' / '>>') multiline_space?
      right:shift_expression <BinaryMethodCall>
      /
      add_subtract_expression
    end
    
    rule add_subtract_expression
      left:times_divide_expression space?
      name:('+' / '-') multiline_space?
      right:add_subtract_expression <BinaryMethodCall>
      /
      times_divide_expression
    end
    
    rule times_divide_expression
      left:method_call_expression space?
      name:('*' / '/') multiline_space?
      right:times_divide_expression <BinaryMethodCall>
      /
      method_call_expression
    end
    
    rule method_call_expression
      method_call_chain / unary_expression
    end
    
    rule unary_expression
      name:('-' / '+' / '!') multiline_space? receiver:primary <UnaryMethodCall> /
      primary
    end
    
    rule primary
      module_definition /
      class_definition /
      method_definition /
      control_structure /
      literal /
      instance_variable /
      constant /
      local_variable_or_method_call /
      bracketed_expression
    end
    
    rule bracketed_expression
      '(' expression ')' <BracketedExpression>
    end
    
    rule module_definition
      'module' multiline_space
      constant
      definition_body <ModuleDefinition>
    end
    
    rule class_definition
      'class' multiline_space
      constant space?
      superclass:('<' multiline_space? primary)?
      definition_body <ClassDefinition>
    end
    
    rule method_definition
      'def' multiline_space
      receiver:(primary space? '.' multiline_space?)?
      method_name method_argument_pattern
      definition_body <MethodDefinition>
    end
    
    rule definition_body
      terminator expression_list 'end'
    end
    
    rule control_structure
      if_expression /
      while_expression /
      begin_expression
    end
    
    rule if_expression
      'if' multiline_space condition:expression space? terminator
      true_block:expression_list
      false_block:(nested_if_expression / else_expression)?
      'end' <IfExpression>
    end
    
    rule nested_if_expression
      'elsif' multiline_space condition:expression space? terminator
      true_block:expression_list
      false_block:(nested_if_expression / else_expression)? <IfExpression>
    end
    
    rule else_expression
      'else' multiline_space expression_list <ElseExpression>
    end
    
    rule while_expression
      'while' space condition:expression space? terminator
      contents:expression_list
      'end' <WhileExpression>
    end
    
    rule begin_expression
      'begin' multiline_space
      contents:expression_list
      rescue:rescue_expression?
      'end' <BeginExpression>
    end
    
    rule rescue_expression
      'rescue'
      type:(space expression)?
      assignment:(space? '=>' multiline_space variable)?
      multiline_space contents:expression_list <RescueExpression>
    end
    
    # The arguments defined as part of a method definition
    rule method_argument_pattern
      space? '(' multiline_space?
      contents:argument_pattern_contents
      multiline_space? ')' <ArgumentPattern> /
      '' <ArgumentPattern>
    end
    
    # The arguments defined as part of a block definition
    rule block_argument_pattern
      space? '|' multiline_space?
      contents:argument_pattern_contents
      multiline_space? '|' <ArgumentPattern> /
      '' <ArgumentPattern>
    end
    
    rule argument_pattern_contents
      head:argument_pattern_item
      tail:(multiline_space? ',' multiline_space? item:argument_pattern_item)* /
      ''
    end
    
    rule argument_pattern_item
      local_identifier default:(multiline_space? '=' multiline_space? expression)? <ArgumentPatternItem> /
      ('*' / '&') multiline_space? local_identifier <ArgumentPatternItem>
    end
    
    # A literal object, e.g. a number, string, true, false, etc
    rule literal
      number / array / string / boolean / nil
    end
    
    # A chain of one or more method calls. This matches only when we know for sure that a method is
    # being called. So for example just "foo" will not match - as that may be a local variable or
    # a method call. But "foo()" is definitely a method call, so we can match that. A chain is of 
    # the form "foo.bar(...).baz(...)" and we have to convert this to several MethodCall instances
    # when creating the AST.
    rule method_call_chain
      receiver:unary_expression tail:method_call_chain_tail <MethodCallChain> /
      head:(method_name:identifier argument_list) tail:method_call_chain_tail? <ImplicitMethodCallChain>
    end
    
    rule method_call_chain_tail
      method_call_segment+
    end
    
    rule method_call_segment
      dot_method_call /
      array_assign /
      array_access
    end
    
    rule dot_method_call
      '.' multiline_space? method_name argument_list:argument_list?
    end
    
    rule array_access
      '' array_brackets <ArrayAccess>
    end
    
    rule array_assign
      array_brackets space? '=' multiline_space? value:argument_list_item <ArrayAssign>
    end
    
    rule array_brackets
      '[' multiline_space? ']' <ArrayBrackets> /
      '[' multiline_space?
      head:argument_list_item
      tail:(multiline_space? ',' multiline_space? argument_list_item)*
      multiline_space? ']' <ArrayBrackets>
    end
    
    # Argument list - values which are passed during a method call
    # This is when there are definitely arguments but they are possibly empty (i.e. an
    # empty pair of parentheses). If there is simply an empty string (i.e. an empty list of
    # arguments *not* surrounded by parentheses) these are not matched - this special case is dealt
    # with by the local_variable_or_method_call rule
    #
    # A block is also considered to be a part of the argument list
    rule argument_list
      bracketed_argument_list /
      unbracketed_argument_list
    end
    
    # Any number of items inside parentheses, with an optional block
    rule bracketed_argument_list
      space? '(' multiline_space?
      head:argument_list_item
      tail:(multiline_space? ',' multiline_space? argument_list_item)*
      multiline_space? ')' block_node:block? <ArgumentList>
      /
      space? '(' multiline_space? ')' block_node:block? <ArgumentList>
    end
    
    # No parentheses, so in order for it to definitely be an argument list we need:
    #
    #   1. EITHER 1 or more items
    #   2. OR no items, but a block
    #
    # Note that a block isn't included in option 1, as it would just bind to the last argument
    # anyway. If the block should bind to the method call, parentheses must be used.
    # 
    # The argument list may not start with + or -, so as not to confuse "x +1" with "x(+1)"
    # TODO: Is the this solved by precedence?
    rule unbracketed_argument_list
      space !('+' / '-')
      head:argument_list_item
      tail:(space? ',' multiline_space? argument_list_item)*
      block_node:block? <ArgumentList>
      /
      '' block_node:block <ArgumentList>
    end
    
    # A splat, a block pass, or a normal expression
    rule argument_list_item
      ('*' / '&')? multiline_space? expression <ArgumentListItem>
    end
    
    rule block
      braces_block / do_block
    end
    
    rule braces_block
      space? '{' block_argument_pattern multiline_space? expression_list '}' <Block>
    end
    
    rule do_block
      space 'do' block_argument_pattern multiline_space? expression_list 'end' <Block>
    end
    
    # A local or instance variable
    rule variable
      local_variable / instance_variable
    end
    
    # This is the same as local_variable except that it may also be a method call with an implicit
    # receiver, no parentheses and no arguments. This ambiguity has to be resolved at runtime.
    rule local_variable_or_method_call
      local_identifier <LocalVariableOrMethodCall>
    end
    
    # A local variable when we know it is definitely a variable (not a method)
    rule local_variable
      local_identifier <LocalVariable>
    end
    
    rule instance_variable
      '@' identifier <InstanceVariable>
    end
    
    rule keyword
      'class' / 'module' / 'def' /
      'do' / 'end' /
      'if' / 'else' / 'elsif' / 'while' /
      'begin' / 'rescue'
    end
    
    rule method_name
      (basic_method_name / special_method_name) <MethodName>
    end
    
    # Keywords are allowed
    rule basic_method_name
      [a-zA-Z_] [a-zA-Z0-9_]* ('?' / '!' / '=')?
    end
    
    # Match in order of number of characters so we don't get conflict, e.g. if '<' is tested before
    # '<='
    rule special_method_name
      # Three characters
      '===' / '<=>' /
      '[]=' /
      
      # Two characters
      '==' / '!=' /
      '<=' / '>=' /
      '<<' / '>>' /
      '--' / '++' / '!!' /
      '[]' /
      
      # One character
      '<' / '>' /
      '+' / '-' /
      '*' / '/'
    end
    
    # A general identifier must not start with a number and must not conflict with a keyword
    rule identifier
      !keyword [a-zA-Z_] [a-zA-Z0-9_]* <Identifier>
    end
    
    # A local identifier must start with an underscore or lowercase letter, and must not conflict
    # with a keyword
    rule local_identifier
      !keyword [a-z_] [a-zA-Z0-9_]*
    end
    
    # A constant must start with a capital letter
    rule constant
      [A-Z] [a-zA-Z0-9_]* <Constant>
    end
    
    rule number
      [0-9]+ <Integer>
    end
    
    rule array
      '[' multiline_space?
      head:expression
      tail:(multiline_space? ',' multiline_space? expression)*
      multiline_space? ']' <Array>
      /
      '[' multiline_space? ']' <Array>
    end
    
    rule string
      string_without_interpolation /
      string_with_interpolation
    end
    
    rule string_without_interpolation
      "'" value:[^\']* "'" <StringWithoutInterpolation>
    end
    
    rule string_with_interpolation
      '"' value:[^\"]* '"' <StringWithInterpolation>
    end
    
    rule boolean
      'true' <True> / 'false' <False>
    end
    
    rule nil
      'nil' <Nil>
    end
    
    # A terminator signifies the end of a statement. It can be a newline or a semicolon, followed
    # by any amount of space
    rule terminator
      ("\n" / ";") multiline_space?
    end
    
    rule space
      [ \t]+
    end
    
    rule multiline_space
      [ \t\n\r]+
    end
  end
end
