# Autogenerated from a Treetop grammar. Edits may be lost.


module Carat
  module Language
    include Treetop::Runtime

    def root
      @root || :program
    end

    def _nt_program
      start_index = index
      if node_cache[:program].has_key?(index)
        cached = node_cache[:program][index]
        @index = cached.interval.end if cached
        return cached
      end

      r0 = _nt_block

      node_cache[:program][start_index] = r0

      r0
    end

    module Block0
      def expression
        elements[0]
      end

      def terminator
        elements[1]
      end
    end

    module Block1
      def first
        elements[0]
      end

      def rest
        elements[1]
      end

    end

    module Block2
      def expressions
        [first] + rest.map(&:expression)
      end
      
      def to_ast
        Carat::AST::Block.new(expressions.map(&:to_ast))
      end
    end

    def _nt_block
      start_index = index
      if node_cache[:block].has_key?(index)
        cached = node_cache[:block][index]
        @index = cached.interval.end if cached
        return cached
      end

      i1, s1 = index, []
      r2 = _nt_expression
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          r5 = _nt_expression
          s4 << r5
          if r5
            r6 = _nt_terminator
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(Block0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s1 << r3
        if r3
          r8 = _nt_terminator
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r7
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Block1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        r0 = instantiate_node(SyntaxNode,input, index...index)
      end

      node_cache[:block][start_index] = r0

      r0
    end

    def _nt_expression
      start_index = index
      if node_cache[:expression].has_key?(index)
        cached = node_cache[:expression][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_class_definition
      if r1
        r0 = r1
      else
        r2 = _nt_method_definition
        if r2
          r0 = r2
        else
          r3 = _nt_assignment
          if r3
            r0 = r3
          else
            r4 = _nt_literal
            if r4
              r0 = r4
            else
              r5 = _nt_variable_or_call
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:expression][start_index] = r0

      r0
    end

    module ClassDefinition0
      def space
        elements[1]
      end

      def constant
        elements[2]
      end

      def definition_body
        elements[3]
      end
    end

    module ClassDefinition1
      def to_ast
        Carat::AST::ClassDefinition.new(definition_body.to_ast)
      end
    end

    def _nt_class_definition
      start_index = index
      if node_cache[:class_definition].has_key?(index)
        cached = node_cache[:class_definition][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('class', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('class')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          r3 = _nt_constant
          s0 << r3
          if r3
            r4 = _nt_definition_body
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ClassDefinition0)
        r0.extend(ClassDefinition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:class_definition][start_index] = r0

      r0
    end

    module MethodDefinition0
      def space
        elements[1]
      end

      def identifier
        elements[2]
      end

      def definition_body
        elements[3]
      end
    end

    module MethodDefinition1
      def to_ast
        Carat::AST::MethodDefinition.new(definition_body.to_ast)
      end
    end

    def _nt_method_definition
      start_index = index
      if node_cache[:method_definition].has_key?(index)
        cached = node_cache[:method_definition][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('def', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('def')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          r3 = _nt_identifier
          s0 << r3
          if r3
            r4 = _nt_definition_body
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(MethodDefinition0)
        r0.extend(MethodDefinition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:method_definition][start_index] = r0

      r0
    end

    module DefinitionBody0
      def multiline_space
        elements[0]
      end

      def block
        elements[1]
      end

    end

    module DefinitionBody1
      def to_ast
        block.to_ast
      end
    end

    def _nt_definition_body
      start_index = index
      if node_cache[:definition_body].has_key?(index)
        cached = node_cache[:definition_body][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_multiline_space
      s0 << r1
      if r1
        r2 = _nt_block
        s0 << r2
        if r2
          if has_terminal?('end', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('end')
            r3 = nil
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(DefinitionBody0)
        r0.extend(DefinitionBody1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definition_body][start_index] = r0

      r0
    end

    module Assignment0
      def variable
        elements[0]
      end

      def expression
        elements[4]
      end
    end

    def _nt_assignment
      start_index = index
      if node_cache[:assignment].has_key?(index)
        cached = node_cache[:assignment][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_variable
      s0 << r1
      if r1
        r3 = _nt_space
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if has_terminal?('=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('=')
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_space
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_expression
              s0 << r7
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Assignment0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:assignment][start_index] = r0

      r0
    end

    def _nt_literal
      start_index = index
      if node_cache[:literal].has_key?(index)
        cached = node_cache[:literal][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_number
      if r1
        r0 = r1
      else
        r2 = _nt_string
        if r2
          r0 = r2
        else
          r3 = _nt_true
          if r3
            r0 = r3
          else
            r4 = _nt_false
            if r4
              r0 = r4
            else
              r5 = _nt_nil
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:literal][start_index] = r0

      r0
    end

    def _nt_variable
      start_index = index
      if node_cache[:variable].has_key?(index)
        cached = node_cache[:variable][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_local_variable
      if r1
        r0 = r1
      else
        r2 = _nt_instance_variable
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:variable][start_index] = r0

      r0
    end

    def _nt_variable_or_call
      start_index = index
      if node_cache[:variable_or_call].has_key?(index)
        cached = node_cache[:variable_or_call][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_local_variable_or_call
      if r1
        r0 = r1
      else
        r2 = _nt_instance_variable
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:variable_or_call][start_index] = r0

      r0
    end

    def _nt_local_variable_or_call
      start_index = index
      if node_cache[:local_variable_or_call].has_key?(index)
        cached = node_cache[:local_variable_or_call][index]
        @index = cached.interval.end if cached
        return cached
      end

      r0 = _nt_identifier

      node_cache[:local_variable_or_call][start_index] = r0

      r0
    end

    def _nt_local_variable
      start_index = index
      if node_cache[:local_variable].has_key?(index)
        cached = node_cache[:local_variable][index]
        @index = cached.interval.end if cached
        return cached
      end

      r0 = _nt_identifier

      node_cache[:local_variable][start_index] = r0

      r0
    end

    module InstanceVariable0
      def identifier
        elements[1]
      end
    end

    def _nt_instance_variable
      start_index = index
      if node_cache[:instance_variable].has_key?(index)
        cached = node_cache[:instance_variable][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('@', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_identifier
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(InstanceVariable0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:instance_variable][start_index] = r0

      r0
    end

    module Constant0
    end

    def _nt_constant
      start_index = index
      if node_cache[:constant].has_key?(index)
        cached = node_cache[:constant][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[A-Z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-zA-Z0-9_]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Constant0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:constant][start_index] = r0

      r0
    end

    module Identifier0
    end

    def _nt_identifier
      start_index = index
      if node_cache[:identifier].has_key?(index)
        cached = node_cache[:identifier][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[a-zA-Z_]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-zA-Z0-9_]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Identifier0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:identifier][start_index] = r0

      r0
    end

    def _nt_number
      start_index = index
      if node_cache[:number].has_key?(index)
        cached = node_cache[:number][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:number][start_index] = r0

      r0
    end

    module String0
    end

    module String1
    end

    def _nt_string
      start_index = index
      if node_cache[:string].has_key?(index)
        cached = node_cache[:string][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      if has_terminal?("'", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r2 = nil
      end
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[^\\\']', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s1 << r3
        if r3
          if has_terminal?("'", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r5 = nil
          end
          s1 << r5
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(String0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i6, s6 = index, []
        if has_terminal?('"', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?('\G[^\\"]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          s6 << r8
          if r8
            if has_terminal?('"', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('"')
              r10 = nil
            end
            s6 << r10
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(String1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:string][start_index] = r0

      r0
    end

    def _nt_true
      start_index = index
      if node_cache[:true].has_key?(index)
        cached = node_cache[:true][index]
        @index = cached.interval.end if cached
        return cached
      end

      if has_terminal?('true', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('true')
        r0 = nil
      end

      node_cache[:true][start_index] = r0

      r0
    end

    def _nt_false
      start_index = index
      if node_cache[:false].has_key?(index)
        cached = node_cache[:false][index]
        @index = cached.interval.end if cached
        return cached
      end

      if has_terminal?('false', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('false')
        r0 = nil
      end

      node_cache[:false][start_index] = r0

      r0
    end

    def _nt_nil
      start_index = index
      if node_cache[:nil].has_key?(index)
        cached = node_cache[:nil][index]
        @index = cached.interval.end if cached
        return cached
      end

      if has_terminal?('nil', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('nil')
        r0 = nil
      end

      node_cache[:nil][start_index] = r0

      r0
    end

    module Terminator0
    end

    def _nt_terminator
      start_index = index
      if node_cache[:terminator].has_key?(index)
        cached = node_cache[:terminator][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?(";", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(";")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        r5 = _nt_multiline_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Terminator0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:terminator][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[ \\t]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:space][start_index] = r0

      r0
    end

    def _nt_multiline_space
      start_index = index
      if node_cache[:multiline_space].has_key?(index)
        cached = node_cache[:multiline_space][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[ \\t\\n\\r]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:multiline_space][start_index] = r0

      r0
    end

  end

  class LanguageParser < Treetop::Runtime::CompiledParser
    include Language
  end

end
