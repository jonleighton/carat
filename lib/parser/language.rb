# Autogenerated from a Treetop grammar. Edits may be lost.


module Carat
  module Language
    include Treetop::Runtime

    def root
      @root || :program
    end

    module Program0
      def expression_list
        elements[1]
      end
    end

    def _nt_program
      start_index = index
      if node_cache[:program].has_key?(index)
        cached = node_cache[:program][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_multiline_space
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r3 = _nt_expression_list
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(Program,input, i0...index, s0)
        r0.extend(Program0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:program][start_index] = r0

      r0
    end

    module ExpressionList0
      def terminator
        elements[1]
      end

      def expression
        elements[2]
      end
    end

    module ExpressionList1
      def first
        elements[0]
      end

      def rest
        elements[1]
      end

    end

    def _nt_expression_list
      start_index = index
      if node_cache[:expression_list].has_key?(index)
        cached = node_cache[:expression_list][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_expression
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r5
          if r5
            r7 = _nt_terminator
            s4 << r7
            if r7
              r8 = _nt_expression
              s4 << r8
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(ExpressionList0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s1 << r3
        if r3
          r10 = _nt_space
          if r10
            r9 = r10
          else
            r9 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r9
          if r9
            r12 = _nt_terminator
            if r12
              r11 = r12
            else
              r11 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r11
          end
        end
      end
      if s1.last
        r1 = instantiate_node(ExpressionList,input, i1...index, s1)
        r1.extend(ExpressionList1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('', false, index)
          r13 = instantiate_node(EmptyExpressionList,input, index...(index + 0))
          @index += 0
        else
          terminal_parse_failure('')
          r13 = nil
        end
        if r13
          r0 = r13
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:expression_list][start_index] = r0

      r0
    end

    def _nt_expression
      start_index = index
      if node_cache[:expression].has_key?(index)
        cached = node_cache[:expression][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_binary_method
      if r1
        r0 = r1
      else
        r2 = _nt_primary
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:expression][start_index] = r0

      r0
    end

    def _nt_primary
      start_index = index
      if node_cache[:primary].has_key?(index)
        cached = node_cache[:primary][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_method_call_chain
      if r1
        r0 = r1
      else
        r2 = _nt_secondary
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:primary][start_index] = r0

      r0
    end

    def _nt_secondary
      start_index = index
      if node_cache[:secondary].has_key?(index)
        cached = node_cache[:secondary][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_module_definition
      if r1
        r0 = r1
      else
        r2 = _nt_class_definition
        if r2
          r0 = r2
        else
          r3 = _nt_method_definition
          if r3
            r0 = r3
          else
            r4 = _nt_assignment
            if r4
              r0 = r4
            else
              r5 = _nt_literal
              if r5
                r0 = r5
              else
                r6 = _nt_instance_variable
                if r6
                  r0 = r6
                else
                  r7 = _nt_constant
                  if r7
                    r0 = r7
                  else
                    r8 = _nt_local_variable_or_method_call
                    if r8
                      r0 = r8
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:secondary][start_index] = r0

      r0
    end

    module BinaryMethod0
      def left
        elements[0]
      end

      def name
        elements[2]
      end

      def right
        elements[4]
      end
    end

    def _nt_binary_method
      start_index = index
      if node_cache[:binary_method].has_key?(index)
        cached = node_cache[:binary_method][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_primary
      s0 << r1
      if r1
        r3 = _nt_space
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          i4 = index
          if has_terminal?('+', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('+')
            r5 = nil
          end
          if r5
            r4 = r5
          else
            if has_terminal?('-', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r6 = nil
            end
            if r6
              r4 = r6
            else
              if has_terminal?('==', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('==')
                r7 = nil
              end
              if r7
                r4 = r7
              else
                @index = i4
                r4 = nil
              end
            end
          end
          s0 << r4
          if r4
            r9 = _nt_multiline_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
            if r8
              r10 = _nt_expression
              s0 << r10
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(BinaryOperation,input, i0...index, s0)
        r0.extend(BinaryMethod0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:binary_method][start_index] = r0

      r0
    end

    module ModuleDefinition0
      def space
        elements[1]
      end

      def constant
        elements[2]
      end

      def definition_body
        elements[3]
      end
    end

    def _nt_module_definition
      start_index = index
      if node_cache[:module_definition].has_key?(index)
        cached = node_cache[:module_definition][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('module', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('module')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          r3 = _nt_constant
          s0 << r3
          if r3
            r4 = _nt_definition_body
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(ModuleDefinition,input, i0...index, s0)
        r0.extend(ModuleDefinition0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:module_definition][start_index] = r0

      r0
    end

    module ClassDefinition0
      def primary
        elements[2]
      end
    end

    module ClassDefinition1
      def space
        elements[1]
      end

      def constant
        elements[2]
      end

      def superclass
        elements[4]
      end

      def definition_body
        elements[5]
      end
    end

    def _nt_class_definition
      start_index = index
      if node_cache[:class_definition].has_key?(index)
        cached = node_cache[:class_definition][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('class', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('class')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          r3 = _nt_constant
          s0 << r3
          if r3
            r5 = _nt_space
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r4
            if r4
              i7, s7 = index, []
              if has_terminal?('<', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('<')
                r8 = nil
              end
              s7 << r8
              if r8
                r10 = _nt_multiline_space
                if r10
                  r9 = r10
                else
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s7 << r9
                if r9
                  r11 = _nt_primary
                  s7 << r11
                end
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(ClassDefinition0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                r6 = r7
              else
                r6 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r6
              if r6
                r12 = _nt_definition_body
                s0 << r12
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(ClassDefinition,input, i0...index, s0)
        r0.extend(ClassDefinition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:class_definition][start_index] = r0

      r0
    end

    module MethodDefinition0
      def secondary
        elements[0]
      end

    end

    module MethodDefinition1
      def space
        elements[1]
      end

      def receiver
        elements[2]
      end

      def method_name
        elements[4]
      end

      def method_argument_pattern
        elements[5]
      end

      def definition_body
        elements[6]
      end
    end

    def _nt_method_definition
      start_index = index
      if node_cache[:method_definition].has_key?(index)
        cached = node_cache[:method_definition][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('def', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('def')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          i4, s4 = index, []
          r5 = _nt_secondary
          s4 << r5
          if r5
            r7 = _nt_space
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r6
            if r6
              if has_terminal?('.', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r8 = nil
              end
              s4 << r8
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(MethodDefinition0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            r10 = _nt_space
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r9
            if r9
              r11 = _nt_method_name
              s0 << r11
              if r11
                r12 = _nt_method_argument_pattern
                s0 << r12
                if r12
                  r13 = _nt_definition_body
                  s0 << r13
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(MethodDefinition,input, i0...index, s0)
        r0.extend(MethodDefinition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:method_definition][start_index] = r0

      r0
    end

    module DefinitionBody0
      def multiline_space
        elements[0]
      end

      def expression_list
        elements[1]
      end

    end

    def _nt_definition_body
      start_index = index
      if node_cache[:definition_body].has_key?(index)
        cached = node_cache[:definition_body][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_multiline_space
      s0 << r1
      if r1
        r2 = _nt_expression_list
        s0 << r2
        if r2
          if has_terminal?('end', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('end')
            r3 = nil
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(DefinitionBody0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:definition_body][start_index] = r0

      r0
    end

    module MethodArgumentPattern0
      def contents
        elements[2]
      end

    end

    def _nt_method_argument_pattern
      start_index = index
      if node_cache[:method_argument_pattern].has_key?(index)
        cached = node_cache[:method_argument_pattern][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if has_terminal?('(', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_argument_pattern_contents
          s1 << r5
          if r5
            if has_terminal?(')', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r6 = nil
            end
            s1 << r6
          end
        end
      end
      if s1.last
        r1 = instantiate_node(ArgumentPattern,input, i1...index, s1)
        r1.extend(MethodArgumentPattern0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('', false, index)
          r7 = instantiate_node(ArgumentPattern,input, index...(index + 0))
          @index += 0
        else
          terminal_parse_failure('')
          r7 = nil
        end
        if r7
          r0 = r7
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:method_argument_pattern][start_index] = r0

      r0
    end

    module BlockArgumentPattern0
      def contents
        elements[2]
      end

    end

    def _nt_block_argument_pattern
      start_index = index
      if node_cache[:block_argument_pattern].has_key?(index)
        cached = node_cache[:block_argument_pattern][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if has_terminal?('|', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('|')
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_argument_pattern_contents
          s1 << r5
          if r5
            if has_terminal?('|', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('|')
              r6 = nil
            end
            s1 << r6
          end
        end
      end
      if s1.last
        r1 = instantiate_node(ArgumentPattern,input, i1...index, s1)
        r1.extend(BlockArgumentPattern0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('', false, index)
          r7 = instantiate_node(ArgumentPattern,input, index...(index + 0))
          @index += 0
        else
          terminal_parse_failure('')
          r7 = nil
        end
        if r7
          r0 = r7
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:block_argument_pattern][start_index] = r0

      r0
    end

    module ArgumentPatternContents0
      def item
        elements[3]
      end
    end

    module ArgumentPatternContents1
      def local_identifier
        elements[4]
      end
    end

    module ArgumentPatternContents2
      def head
        elements[0]
      end

      def tail
        elements[1]
      end

      def block_pass
        elements[2]
      end

    end

    def _nt_argument_pattern_contents
      start_index = index
      if node_cache[:argument_pattern_contents].has_key?(index)
        cached = node_cache[:argument_pattern_contents][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_argument_pattern_item
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          r5 = _nt_multiline_space
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r4
          if r4
            if has_terminal?(',', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(',')
              r6 = nil
            end
            s3 << r6
            if r6
              r8 = _nt_multiline_space
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r7
              if r7
                r9 = _nt_argument_pattern_item
                s3 << r9
              end
            end
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(ArgumentPatternContents0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          i11, s11 = index, []
          if has_terminal?(',', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r12 = nil
          end
          s11 << r12
          if r12
            r14 = _nt_multiline_space
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r13
            if r13
              if has_terminal?('&', false, index)
                r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('&')
                r15 = nil
              end
              s11 << r15
              if r15
                r17 = _nt_multiline_space
                if r17
                  r16 = r17
                else
                  r16 = instantiate_node(SyntaxNode,input, index...index)
                end
                s11 << r16
                if r16
                  r18 = _nt_local_identifier
                  s11 << r18
                end
              end
            end
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(ArgumentPatternContents1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r10 = r11
          else
            r10 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r10
          if r10
            r20 = _nt_multiline_space
            if r20
              r19 = r20
            else
              r19 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r19
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ArgumentPatternContents2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:argument_pattern_contents][start_index] = r0

      r0
    end

    module ArgumentPatternItem0
      def multiline_space
        elements[2]
      end

      def expression
        elements[3]
      end
    end

    module ArgumentPatternItem1
      def local_identifier
        elements[0]
      end

      def default
        elements[1]
      end
    end

    module ArgumentPatternItem2
      def local_identifier
        elements[2]
      end
    end

    def _nt_argument_pattern_item
      start_index = index
      if node_cache[:argument_pattern_item].has_key?(index)
        cached = node_cache[:argument_pattern_item][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_local_identifier
      s1 << r2
      if r2
        i4, s4 = index, []
        r6 = _nt_multiline_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?('=', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('=')
            r7 = nil
          end
          s4 << r7
          if r7
            r8 = _nt_multiline_space
            s4 << r8
            if r8
              r9 = _nt_expression
              s4 << r9
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(ArgumentPatternItem0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(ArgumentPatternItem,input, i1...index, s1)
        r1.extend(ArgumentPatternItem1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i10, s10 = index, []
        if has_terminal?('*', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('*')
          r11 = nil
        end
        s10 << r11
        if r11
          r13 = _nt_multiline_space
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s10 << r12
          if r12
            r14 = _nt_local_identifier
            s10 << r14
          end
        end
        if s10.last
          r10 = instantiate_node(SplatArgumentPatternItem,input, i10...index, s10)
          r10.extend(ArgumentPatternItem2)
        else
          @index = i10
          r10 = nil
        end
        if r10
          r0 = r10
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:argument_pattern_item][start_index] = r0

      r0
    end

    module Assignment0
      def variable
        elements[0]
      end

      def expression
        elements[4]
      end
    end

    def _nt_assignment
      start_index = index
      if node_cache[:assignment].has_key?(index)
        cached = node_cache[:assignment][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_variable
      s0 << r1
      if r1
        r3 = _nt_space
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if has_terminal?('=', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('=')
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_space
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_expression
              s0 << r7
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(Assignment,input, i0...index, s0)
        r0.extend(Assignment0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:assignment][start_index] = r0

      r0
    end

    def _nt_literal
      start_index = index
      if node_cache[:literal].has_key?(index)
        cached = node_cache[:literal][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_number
      if r1
        r0 = r1
      else
        r2 = _nt_string
        if r2
          r0 = r2
        else
          r3 = _nt_boolean
          if r3
            r0 = r3
          else
            r4 = _nt_nil
            if r4
              r0 = r4
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:literal][start_index] = r0

      r0
    end

    module MethodCallChain0
      def receiver
        elements[0]
      end

      def tail
        elements[1]
      end
    end

    module MethodCallChain1
      def method_name
        elements[0]
      end

      def argument_list
        elements[1]
      end
    end

    module MethodCallChain2
      def head
        elements[0]
      end

      def tail
        elements[1]
      end
    end

    def _nt_method_call_chain
      start_index = index
      if node_cache[:method_call_chain].has_key?(index)
        cached = node_cache[:method_call_chain][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_secondary
      s1 << r2
      if r2
        r3 = _nt_method_call_chain_tail
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(MethodCallChain,input, i1...index, s1)
        r1.extend(MethodCallChain0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i4, s4 = index, []
        i5, s5 = index, []
        r6 = _nt_identifier
        s5 << r6
        if r6
          r7 = _nt_argument_list
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(MethodCallChain1)
        else
          @index = i5
          r5 = nil
        end
        s4 << r5
        if r5
          r9 = _nt_method_call_chain_tail
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r8
        end
        if s4.last
          r4 = instantiate_node(ImplicitMethodCallChain,input, i4...index, s4)
          r4.extend(MethodCallChain2)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r0 = r4
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:method_call_chain][start_index] = r0

      r0
    end

    module MethodCallChainTail0
      def method_name
        elements[2]
      end

      def argument_list
        elements[3]
      end
    end

    def _nt_method_call_chain_tail
      start_index = index
      if node_cache[:method_call_chain_tail].has_key?(index)
        cached = node_cache[:method_call_chain_tail][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        i1, s1 = index, []
        if has_terminal?('.', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r2 = nil
        end
        s1 << r2
        if r2
          r4 = _nt_multiline_space
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r3
          if r3
            r5 = _nt_method_name
            s1 << r5
            if r5
              r7 = _nt_argument_list
              if r7
                r6 = r7
              else
                r6 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r6
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(MethodCallChainTail0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:method_call_chain_tail][start_index] = r0

      r0
    end

    module ArgumentList0
      def item
        elements[1]
      end
    end

    module ArgumentList1
      def item
        elements[0]
      end

    end

    module ArgumentList2
      def block
        elements[3]
      end
    end

    module ArgumentList3
      def argument_list_item
        elements[3]
      end
    end

    module ArgumentList4
      def head
        elements[0]
      end

      def tail
        elements[1]
      end
    end

    module ArgumentList5
      def item
        elements[2]
      end
    end

    module ArgumentList6
      def item
        elements[3]
      end

    end

    module ArgumentList7
      def items
        elements[3]
      end

      def block
        elements[4]
      end
    end

    module ArgumentList8
      def argument_list_item
        elements[3]
      end
    end

    module ArgumentList9
      def head
        elements[0]
      end

      def tail
        elements[1]
      end
    end

    module ArgumentList10
      def item
        elements[1]
      end
    end

    module ArgumentList11
      def item
        elements[1]
      end
    end

    module ArgumentList12
      def space
        elements[0]
      end

      def items
        elements[2]
      end

      def block
        elements[3]
      end
    end

    module ArgumentList13
      def item
        elements[1]
      end
    end

    module ArgumentList14
      def block
        elements[1]
      end
    end

    def _nt_argument_list
      start_index = index
      if node_cache[:argument_list].has_key?(index)
        cached = node_cache[:argument_list][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if has_terminal?('(', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r4 = nil
        end
        s1 << r4
        if r4
          r6 = _nt_multiline_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r5
          if r5
            i7 = index
            i8, s8 = index, []
            if has_terminal?(')', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r9 = nil
            end
            s8 << r9
            if r9
              r11 = _nt_block
              if r11
                r10 = r11
              else
                r10 = instantiate_node(SyntaxNode,input, index...index)
              end
              s8 << r10
            end
            if s8.last
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              r8.extend(ArgumentList0)
            else
              @index = i8
              r8 = nil
            end
            if r8
              r7 = r8
            else
              i12, s12 = index, []
              r13 = _nt_block_pass
              s12 << r13
              if r13
                r15 = _nt_multiline_space
                if r15
                  r14 = r15
                else
                  r14 = instantiate_node(SyntaxNode,input, index...index)
                end
                s12 << r14
                if r14
                  if has_terminal?(')', false, index)
                    r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r16 = nil
                  end
                  s12 << r16
                end
              end
              if s12.last
                r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                r12.extend(ArgumentList1)
              else
                @index = i12
                r12 = nil
              end
              if r12
                r7 = r12
              else
                @index = i7
                r7 = nil
              end
            end
            s1 << r7
          end
        end
      end
      if s1.last
        r1 = instantiate_node(ArgumentList,input, i1...index, s1)
        r1.extend(ArgumentList2)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i17, s17 = index, []
        r19 = _nt_space
        if r19
          r18 = r19
        else
          r18 = instantiate_node(SyntaxNode,input, index...index)
        end
        s17 << r18
        if r18
          if has_terminal?('(', false, index)
            r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r20 = nil
          end
          s17 << r20
          if r20
            r22 = _nt_multiline_space
            if r22
              r21 = r22
            else
              r21 = instantiate_node(SyntaxNode,input, index...index)
            end
            s17 << r21
            if r21
              i23, s23 = index, []
              r24 = _nt_argument_list_item
              s23 << r24
              if r24
                s25, i25 = [], index
                loop do
                  i26, s26 = index, []
                  r28 = _nt_multiline_space
                  if r28
                    r27 = r28
                  else
                    r27 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s26 << r27
                  if r27
                    if has_terminal?(',', false, index)
                      r29 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(',')
                      r29 = nil
                    end
                    s26 << r29
                    if r29
                      r31 = _nt_multiline_space
                      if r31
                        r30 = r31
                      else
                        r30 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s26 << r30
                      if r30
                        r32 = _nt_argument_list_item
                        s26 << r32
                      end
                    end
                  end
                  if s26.last
                    r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                    r26.extend(ArgumentList3)
                  else
                    @index = i26
                    r26 = nil
                  end
                  if r26
                    s25 << r26
                  else
                    break
                  end
                end
                r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                s23 << r25
              end
              if s23.last
                r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                r23.extend(ArgumentList4)
              else
                @index = i23
                r23 = nil
              end
              s17 << r23
              if r23
                i33 = index
                i34, s34 = index, []
                r36 = _nt_multiline_space
                if r36
                  r35 = r36
                else
                  r35 = instantiate_node(SyntaxNode,input, index...index)
                end
                s34 << r35
                if r35
                  if has_terminal?(')', false, index)
                    r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(')')
                    r37 = nil
                  end
                  s34 << r37
                  if r37
                    r39 = _nt_block
                    if r39
                      r38 = r39
                    else
                      r38 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s34 << r38
                  end
                end
                if s34.last
                  r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                  r34.extend(ArgumentList5)
                else
                  @index = i34
                  r34 = nil
                end
                if r34
                  r33 = r34
                else
                  i40, s40 = index, []
                  r42 = _nt_multiline_space
                  if r42
                    r41 = r42
                  else
                    r41 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s40 << r41
                  if r41
                    if has_terminal?(',', false, index)
                      r43 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(',')
                      r43 = nil
                    end
                    s40 << r43
                    if r43
                      r45 = _nt_multiline_space
                      if r45
                        r44 = r45
                      else
                        r44 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s40 << r44
                      if r44
                        r46 = _nt_block_pass
                        s40 << r46
                        if r46
                          r48 = _nt_multiline_space
                          if r48
                            r47 = r48
                          else
                            r47 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s40 << r47
                          if r47
                            if has_terminal?(')', false, index)
                              r49 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(')')
                              r49 = nil
                            end
                            s40 << r49
                          end
                        end
                      end
                    end
                  end
                  if s40.last
                    r40 = instantiate_node(SyntaxNode,input, i40...index, s40)
                    r40.extend(ArgumentList6)
                  else
                    @index = i40
                    r40 = nil
                  end
                  if r40
                    r33 = r40
                  else
                    @index = i33
                    r33 = nil
                  end
                end
                s17 << r33
              end
            end
          end
        end
        if s17.last
          r17 = instantiate_node(ArgumentList,input, i17...index, s17)
          r17.extend(ArgumentList7)
        else
          @index = i17
          r17 = nil
        end
        if r17
          r0 = r17
        else
          i50, s50 = index, []
          r51 = _nt_space
          s50 << r51
          if r51
            i52 = index
            i53 = index
            if has_terminal?('+', false, index)
              r54 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('+')
              r54 = nil
            end
            if r54
              r53 = r54
            else
              if has_terminal?('-', false, index)
                r55 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('-')
                r55 = nil
              end
              if r55
                r53 = r55
              else
                @index = i53
                r53 = nil
              end
            end
            if r53
              r52 = nil
            else
              @index = i52
              r52 = instantiate_node(SyntaxNode,input, index...index)
            end
            s50 << r52
            if r52
              i56, s56 = index, []
              r57 = _nt_argument_list_item
              s56 << r57
              if r57
                s58, i58 = [], index
                loop do
                  i59, s59 = index, []
                  r61 = _nt_space
                  if r61
                    r60 = r61
                  else
                    r60 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s59 << r60
                  if r60
                    if has_terminal?(',', false, index)
                      r62 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(',')
                      r62 = nil
                    end
                    s59 << r62
                    if r62
                      r64 = _nt_multiline_space
                      if r64
                        r63 = r64
                      else
                        r63 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s59 << r63
                      if r63
                        r65 = _nt_argument_list_item
                        s59 << r65
                      end
                    end
                  end
                  if s59.last
                    r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                    r59.extend(ArgumentList8)
                  else
                    @index = i59
                    r59 = nil
                  end
                  if r59
                    s58 << r59
                  else
                    break
                  end
                end
                r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                s56 << r58
              end
              if s56.last
                r56 = instantiate_node(SyntaxNode,input, i56...index, s56)
                r56.extend(ArgumentList9)
              else
                @index = i56
                r56 = nil
              end
              s50 << r56
              if r56
                i67 = index
                i68, s68 = index, []
                if has_terminal?('', false, index)
                  r69 = instantiate_node(SyntaxNode,input, index...(index + 0))
                  @index += 0
                else
                  terminal_parse_failure('')
                  r69 = nil
                end
                s68 << r69
                if r69
                  r70 = _nt_block
                  s68 << r70
                end
                if s68.last
                  r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                  r68.extend(ArgumentList10)
                else
                  @index = i68
                  r68 = nil
                end
                if r68
                  r67 = r68
                else
                  i71, s71 = index, []
                  if has_terminal?('', false, index)
                    r72 = instantiate_node(SyntaxNode,input, index...(index + 0))
                    @index += 0
                  else
                    terminal_parse_failure('')
                    r72 = nil
                  end
                  s71 << r72
                  if r72
                    r73 = _nt_block_pass
                    s71 << r73
                  end
                  if s71.last
                    r71 = instantiate_node(SyntaxNode,input, i71...index, s71)
                    r71.extend(ArgumentList11)
                  else
                    @index = i71
                    r71 = nil
                  end
                  if r71
                    r67 = r71
                  else
                    @index = i67
                    r67 = nil
                  end
                end
                if r67
                  r66 = r67
                else
                  r66 = instantiate_node(SyntaxNode,input, index...index)
                end
                s50 << r66
              end
            end
          end
          if s50.last
            r50 = instantiate_node(ArgumentList,input, i50...index, s50)
            r50.extend(ArgumentList12)
          else
            @index = i50
            r50 = nil
          end
          if r50
            r0 = r50
          else
            i74, s74 = index, []
            if has_terminal?('', false, index)
              r75 = instantiate_node(SyntaxNode,input, index...(index + 0))
              @index += 0
            else
              terminal_parse_failure('')
              r75 = nil
            end
            s74 << r75
            if r75
              i76, s76 = index, []
              if has_terminal?('', false, index)
                r77 = instantiate_node(SyntaxNode,input, index...(index + 0))
                @index += 0
              else
                terminal_parse_failure('')
                r77 = nil
              end
              s76 << r77
              if r77
                r78 = _nt_block
                s76 << r78
              end
              if s76.last
                r76 = instantiate_node(SyntaxNode,input, i76...index, s76)
                r76.extend(ArgumentList13)
              else
                @index = i76
                r76 = nil
              end
              s74 << r76
            end
            if s74.last
              r74 = instantiate_node(ArgumentList,input, i74...index, s74)
              r74.extend(ArgumentList14)
            else
              @index = i74
              r74 = nil
            end
            if r74
              r0 = r74
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:argument_list][start_index] = r0

      r0
    end

    def _nt_argument_list_item
      start_index = index
      if node_cache[:argument_list_item].has_key?(index)
        cached = node_cache[:argument_list_item][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_splat
      if r1
        r0 = r1
      else
        r2 = _nt_expression
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:argument_list_item][start_index] = r0

      r0
    end

    module Splat0
      def expression
        elements[1]
      end
    end

    def _nt_splat
      start_index = index
      if node_cache[:splat].has_key?(index)
        cached = node_cache[:splat][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('*', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('*')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_expression
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Splat,input, i0...index, s0)
        r0.extend(Splat0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:splat][start_index] = r0

      r0
    end

    module BlockPass0
      def expression
        elements[2]
      end
    end

    def _nt_block_pass
      start_index = index
      if node_cache[:block_pass].has_key?(index)
        cached = node_cache[:block_pass][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('&', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('&')
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_multiline_space
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          r4 = _nt_expression
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(BlockPass,input, i0...index, s0)
        r0.extend(BlockPass0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:block_pass][start_index] = r0

      r0
    end

    def _nt_block
      start_index = index
      if node_cache[:block].has_key?(index)
        cached = node_cache[:block][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_braces_block
      if r1
        r0 = r1
      else
        r2 = _nt_do_block
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:block][start_index] = r0

      r0
    end

    module BracesBlock0
      def block_argument_pattern
        elements[2]
      end

      def expression_list
        elements[4]
      end

    end

    def _nt_braces_block
      start_index = index
      if node_cache[:braces_block].has_key?(index)
        cached = node_cache[:braces_block][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_space
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?('{', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('{')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_block_argument_pattern
          s0 << r4
          if r4
            r6 = _nt_multiline_space
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_expression_list
              s0 << r7
              if r7
                if has_terminal?('}', false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('}')
                  r8 = nil
                end
                s0 << r8
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(Block,input, i0...index, s0)
        r0.extend(BracesBlock0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:braces_block][start_index] = r0

      r0
    end

    module DoBlock0
      def space
        elements[0]
      end

      def block_argument_pattern
        elements[2]
      end

      def expression_list
        elements[4]
      end

    end

    def _nt_do_block
      start_index = index
      if node_cache[:do_block].has_key?(index)
        cached = node_cache[:do_block][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_space
      s0 << r1
      if r1
        if has_terminal?('do', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('do')
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_block_argument_pattern
          s0 << r3
          if r3
            r5 = _nt_multiline_space
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r4
            if r4
              r6 = _nt_expression_list
              s0 << r6
              if r6
                if has_terminal?('end', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('end')
                  r7 = nil
                end
                s0 << r7
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(Block,input, i0...index, s0)
        r0.extend(DoBlock0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:do_block][start_index] = r0

      r0
    end

    def _nt_variable
      start_index = index
      if node_cache[:variable].has_key?(index)
        cached = node_cache[:variable][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_local_variable
      if r1
        r0 = r1
      else
        r2 = _nt_instance_variable
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:variable][start_index] = r0

      r0
    end

    def _nt_local_variable_or_method_call
      start_index = index
      if node_cache[:local_variable_or_method_call].has_key?(index)
        cached = node_cache[:local_variable_or_method_call][index]
        @index = cached.interval.end if cached
        return cached
      end

      r0 = _nt_local_identifier
      r0.extend(LocalVariableOrMethodCall)

      node_cache[:local_variable_or_method_call][start_index] = r0

      r0
    end

    def _nt_local_variable
      start_index = index
      if node_cache[:local_variable].has_key?(index)
        cached = node_cache[:local_variable][index]
        @index = cached.interval.end if cached
        return cached
      end

      r0 = _nt_local_identifier
      r0.extend(LocalVariable)

      node_cache[:local_variable][start_index] = r0

      r0
    end

    module InstanceVariable0
      def identifier
        elements[1]
      end
    end

    def _nt_instance_variable
      start_index = index
      if node_cache[:instance_variable].has_key?(index)
        cached = node_cache[:instance_variable][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('@', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_identifier
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(InstanceVariable,input, i0...index, s0)
        r0.extend(InstanceVariable0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:instance_variable][start_index] = r0

      r0
    end

    def _nt_keyword
      start_index = index
      if node_cache[:keyword].has_key?(index)
        cached = node_cache[:keyword][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      if has_terminal?('class', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('class')
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('module', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure('module')
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?('def', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('def')
            r3 = nil
          end
          if r3
            r0 = r3
          else
            if has_terminal?('do', false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('do')
              r4 = nil
            end
            if r4
              r0 = r4
            else
              if has_terminal?('end', false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('end')
                r5 = nil
              end
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:keyword][start_index] = r0

      r0
    end

    def _nt_method_name
      start_index = index
      if node_cache[:method_name].has_key?(index)
        cached = node_cache[:method_name][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      r1 = _nt_basic_method_name
      if r1
        r0 = r1
      else
        r2 = _nt_binary_method_name
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:method_name][start_index] = r0

      r0
    end

    module BasicMethodName0
    end

    def _nt_basic_method_name
      start_index = index
      if node_cache[:basic_method_name].has_key?(index)
        cached = node_cache[:basic_method_name][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[a-zA-Z_]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-zA-Z0-9_]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(BasicMethodName0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:basic_method_name][start_index] = r0

      r0
    end

    def _nt_binary_method_name
      start_index = index
      if node_cache[:binary_method_name].has_key?(index)
        cached = node_cache[:binary_method_name][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      if has_terminal?('+', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('+')
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('-', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?('==', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('==')
            r3 = nil
          end
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:binary_method_name][start_index] = r0

      r0
    end

    module Identifier0
    end

    def _nt_identifier
      start_index = index
      if node_cache[:identifier].has_key?(index)
        cached = node_cache[:identifier][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_keyword
      if r2
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?('\G[a-zA-Z_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            if has_terminal?('\G[a-zA-Z0-9_]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Identifier0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:identifier][start_index] = r0

      r0
    end

    module LocalIdentifier0
    end

    def _nt_local_identifier
      start_index = index
      if node_cache[:local_identifier].has_key?(index)
        cached = node_cache[:local_identifier][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_keyword
      if r2
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?('\G[a-z_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            if has_terminal?('\G[a-zA-Z0-9_]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(LocalIdentifier0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:local_identifier][start_index] = r0

      r0
    end

    module Constant0
    end

    def _nt_constant
      start_index = index
      if node_cache[:constant].has_key?(index)
        cached = node_cache[:constant][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[A-Z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-zA-Z0-9_]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Constant,input, i0...index, s0)
        r0.extend(Constant0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:constant][start_index] = r0

      r0
    end

    module Number0
    end

    def _nt_number
      start_index = index
      if node_cache[:number].has_key?(index)
        cached = node_cache[:number][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i2 = index
      if has_terminal?('+', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('+')
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?('-', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r4 = nil
        end
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r6 = _nt_multiline_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          s7, i7 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r8 = true
              @index += 1
            else
              r8 = nil
            end
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s0 << r7
        end
      end
      if s0.last
        r0 = instantiate_node(Integer,input, i0...index, s0)
        r0.extend(Number0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:number][start_index] = r0

      r0
    end

    module String0
      def value
        elements[1]
      end

    end

    module String1
      def value
        elements[1]
      end

    end

    def _nt_string
      start_index = index
      if node_cache[:string].has_key?(index)
        cached = node_cache[:string][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      i1, s1 = index, []
      if has_terminal?("'", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r2 = nil
      end
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[^\\\']', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s1 << r3
        if r3
          if has_terminal?("'", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r5 = nil
          end
          s1 << r5
        end
      end
      if s1.last
        r1 = instantiate_node(String,input, i1...index, s1)
        r1.extend(String0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i6, s6 = index, []
        if has_terminal?('"', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?('\G[^\\"]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          s6 << r8
          if r8
            if has_terminal?('"', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('"')
              r10 = nil
            end
            s6 << r10
          end
        end
        if s6.last
          r6 = instantiate_node(String,input, i6...index, s6)
          r6.extend(String1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:string][start_index] = r0

      r0
    end

    def _nt_boolean
      start_index = index
      if node_cache[:boolean].has_key?(index)
        cached = node_cache[:boolean][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0 = index
      if has_terminal?('true', false, index)
        r1 = instantiate_node(True,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('true')
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('false', false, index)
          r2 = instantiate_node(False,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('false')
          r2 = nil
        end
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:boolean][start_index] = r0

      r0
    end

    def _nt_nil
      start_index = index
      if node_cache[:nil].has_key?(index)
        cached = node_cache[:nil][index]
        @index = cached.interval.end if cached
        return cached
      end

      if has_terminal?('nil', false, index)
        r0 = instantiate_node(Nil,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('nil')
        r0 = nil
      end

      node_cache[:nil][start_index] = r0

      r0
    end

    module Terminator0
    end

    def _nt_terminator
      start_index = index
      if node_cache[:terminator].has_key?(index)
        cached = node_cache[:terminator][index]
        @index = cached.interval.end if cached
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?(";", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(";")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        r5 = _nt_multiline_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Terminator0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:terminator][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[ \\t]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:space][start_index] = r0

      r0
    end

    def _nt_multiline_space
      start_index = index
      if node_cache[:multiline_space].has_key?(index)
        cached = node_cache[:multiline_space][index]
        @index = cached.interval.end if cached
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[ \\t\\n\\r]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:multiline_space][start_index] = r0

      r0
    end

    def _nt_nothing
      start_index = index
      if node_cache[:nothing].has_key?(index)
        cached = node_cache[:nothing][index]
        @index = cached.interval.end if cached
        return cached
      end

      if has_terminal?('', false, index)
        r0 = instantiate_node(Nothing,input, index...(index + 0))
        @index += 0
      else
        terminal_parse_failure('')
        r0 = nil
      end

      node_cache[:nothing][start_index] = r0

      r0
    end

  end

  class LanguageParser < Treetop::Runtime::CompiledParser
    include Language
  end

end
